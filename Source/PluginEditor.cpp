/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


void setSliderAndLabel(int x, int y, int width, int height, String labelTest, String name,Slider& slider, Label& label);


//==============================================================================
ZirkOscjuceAudioProcessorEditor::ZirkOscjuceAudioProcessorEditor (ZirkOscjuceAudioProcessor* ownerFilter)
:   AudioProcessorEditor (ownerFilter),
    mSourcePoint(0.0f,0.0f), //coords dome : azimuth, elev
    gainSlider (ZirkOSC_Gain_name),
    azimuthSlider(ZirkOSC_AzimSpan_name),
    elevationSlider(ZirkOSC_ElevSpan_name),
    azimuthLabel(ZirkOSC_Azim_name),
    elevationSpanSlider(ZirkOSC_ElevSpan_name),
    azimuthSpanLabel(ZirkOSC_AzimSpan_name),
    elevationLabel(ZirkOSC_Elev_name),
    gainLabel(ZirkOSC_Gain_name)
        
{
    // This is where our plugin's editor size is set.
    setSize (ZirkOSC_Window_Width, ZirkOSC_Window_Height);
  /*  button1 = new TextButton("Button1");*/
    
   // button1->setBounds (20, 70, 260, 20);*/
    mSourcePoint.setX(0.0f);
    mSourcePoint.setY (0.0f);
    
    gainSlider.setBounds (80, 340, 300	, 20);
    gainSlider.setTextBoxStyle(Slider::TextBoxRight, false, 80, 20);
    gainLabel.setText("Gain", false);
    gainLabel.setBounds(20, 340, 40, 20);
    gainSlider.setRange (0.0, 1.0, 0.01);
    addAndMakeVisible(&gainSlider);
    addAndMakeVisible(&gainLabel);
    
    
    azimuthSlider.setBounds (80, 380, 300, 20);
    azimuthSlider.setTextBoxStyle(Slider::TextBoxRight, false, 80, 20);
    azimuthLabel.setText("Azimuth", false);
    azimuthLabel.setBounds(20, 380, 60, 20);
    azimuthSlider.setRange (ZirkOSC_Azim_Min, ZirkOSC_Azim_Max, 0.01);
    addAndMakeVisible(&azimuthSlider);
    addAndMakeVisible(&azimuthLabel);
    
    elevationSlider.setBounds (80, 420, 300, 20);
    elevationSlider.setTextBoxStyle(Slider::TextBoxRight, false, 80, 20);
    elevationLabel.setText("Elevation", false);
    elevationLabel.setBounds(20, 420, 60, 20);
    elevationSlider.setRange (ZirkOSC_Elev_Min, ZirkOSC_Elev_Max, 0.01);
    addAndMakeVisible(&elevationSlider);
    addAndMakeVisible(&elevationLabel);
    
    
    elevationSpanSlider.setBounds (80, 460, 300, 20);
    elevationSpanSlider.setTextBoxStyle(Slider::TextBoxRight, false, 80, 20);
    elevationSpanLabel.setText("Elev Sp.", false);
    elevationSpanLabel.setBounds(20, 460, 60, 20);
    elevationSpanSlider.setRange (ZirkOSC_ElevSpan_Min, ZirkOSC_ElevSpan_Max, 0.01);
    addAndMakeVisible(&elevationSpanSlider);
    addAndMakeVisible(&elevationSpanLabel);
    
    azimuthSpanSlider.setBounds (80, 500, 300, 20);
    azimuthSpanSlider.setTextBoxStyle(Slider::TextBoxRight, false, 80, 20);
    azimuthSpanLabel.setText("Azim Sp.", false);
    azimuthSpanLabel.setBounds(20, 500, 60, 20);
    azimuthSpanSlider.setRange (ZirkOSC_AzimSpan_Min, ZirkOSC_AzimSpan_Max, 0.01);
    addAndMakeVisible(&azimuthSpanSlider);
    addAndMakeVisible(&azimuthSpanLabel);
    
    
   // addAndMakeVisible(button1);
    
   // addAndMakeVisible(label);
    //button1->addListener(this);
    
    
    elevationSlider.addListener(this);
    azimuthSlider.addListener(this);
    gainSlider.addListener(this);
    elevationSpanSlider.addListener(this);
    azimuthSpanSlider.addListener(this);
    startTimer (50);
}

ZirkOscjuceAudioProcessorEditor::~ZirkOscjuceAudioProcessorEditor()
{
    //deleteAllChildren ();
}
void setSliderAndLabel(int x, int y, int width, int height, String labelText, String name, Slider& slider, Label& label){
    
    //to do improvement
    
}


//==============================================================================
void ZirkOscjuceAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::lightgrey);
    /*
     
    g.setColour (Colours::black);
    g.setFont (15.0f);
    g.drawFittedText ("Hello World!",
                      0, 0, getWidth(), getHeight(),
                      Justification::centred, 1);
     
    */
    paintWallCircle(g);
    paintSpanArc(g);
    paintSourcePoint(g);
    paintAzimuthLine(g);
    paintZenithCircle(g);
    paintCrosshairs(g);
    paintCoordLabels(g);
    paintCenterDot(g);
}

void ZirkOscjuceAudioProcessorEditor::paintSpanArc (Graphics& g){
    ZirkOscjuceAudioProcessor* ourProcessor = getProcessor();
    int selectedSource = ourProcessor->selectedSource;
    float HRAzim = PercentToHR(ourProcessor->tabSource[selectedSource].getAzimuth(), ZirkOSC_Azim_Min, ZirkOSC_Azim_Max),
        HRElev = PercentToHR(ourProcessor->tabSource[selectedSource].getElevation(), ZirkOSC_Elev_Min, ZirkOSC_Elev_Max),
        HRElevSpan = PercentToHR(ourProcessor->tabSource[selectedSource].getElevation_span(), ZirkOSC_ElevSpan_Min, ZirkOSC_ElevSpan_Max),
        HRAzimSpan = PercentToHR(ourProcessor->tabSource[selectedSource].getAzimuth_span(), ZirkOSC_AzimSpan_Min, ZirkOSC_AzimSpan_Max);
    
    
    Point<float> maxElev = {HRAzim, HRElev+HRElevSpan/2};
    Point<float> minElev = {HRAzim, HRElev-HRElevSpan/2};
    
    if(minElev.getY() < ZirkOSC_ElevSpan_Min){
        maxElev.setY(maxElev.getY()+ ZirkOSC_ElevSpan_Min-minElev.getY());
        minElev.setY(ZirkOSC_ElevSpan_Min);
    }
    
    Point<float> screenMaxElev = domeToScreen(maxElev);
    Point<float> screenMinElev = domeToScreen(minElev);
    float maxRadius = sqrtf(screenMaxElev.getX()*screenMaxElev.getX() + screenMaxElev.getY()*screenMaxElev.getY());
    float minRadius = sqrtf(screenMinElev.getX()*screenMinElev.getX() + screenMinElev.getY()*screenMinElev.getY());
    Path myPath;
    myPath.startNewSubPath(ZirkOSC_Center_X+screenMinElev.getX(),ZirkOSC_Center_Y+screenMinElev.getY());
    myPath.addCentredArc(ZirkOSC_Center_X, ZirkOSC_Center_Y, minRadius, minRadius, 0.0, degreeToRadian(-HRAzim), degreeToRadian(-HRAzim + HRAzimSpan/2 ));
    
    if (maxElev.getY()> ZirkOSC_ElevSpan_Max) {
        
        myPath.addCentredArc(ZirkOSC_Center_X, ZirkOSC_Center_Y, maxRadius, maxRadius, 0.0, M_PI+degreeToRadian(-HRAzim + HRAzimSpan/2), M_PI+degreeToRadian(-HRAzim - HRAzimSpan/2 ));
    }
    else{
        myPath.addCentredArc(ZirkOSC_Center_X, ZirkOSC_Center_Y, maxRadius, maxRadius, 0.0, degreeToRadian(-HRAzim+HRAzimSpan/2), degreeToRadian(-HRAzim-HRAzimSpan/2 ));
    }
    myPath.addCentredArc(ZirkOSC_Center_X, ZirkOSC_Center_Y, minRadius, minRadius, 0.0, degreeToRadian(-HRAzim-HRAzimSpan/2), degreeToRadian(-HRAzim ));
   // myPath.addCentredArc(ZirkOSC_Center_X, ZirkOSC_Center_Y, minRadius, minRadius, deltaAzimuth/2, deltaAzimuth/2, 1.0 );
    myPath.closeSubPath();
    g.setColour(Colours::lightgrey);
    g.fillPath(myPath);
    g.setColour(Colours::black);
    g.strokePath(myPath, PathStrokeType::curved);
}

void ZirkOscjuceAudioProcessorEditor::paintSourcePoint (Graphics& g){
    Point<float> screen;
    float HRAzim, HRElev;
    for (int i=0; i<getProcessor()->nbrSources; i++) {
        HRAzim = PercentToHR(getProcessor()->tabSource[i].getAzimuth(), ZirkOSC_Azim_Min, ZirkOSC_Azim_Max);
        HRElev = PercentToHR(getProcessor()->tabSource[i].getElevation(), ZirkOSC_Elev_Min, ZirkOSC_Elev_Max);
        screen = domeToScreen(Point<float> (HRAzim, HRElev));
        g.drawEllipse(ZirkOSC_Center_X + screen.getX()-4, ZirkOSC_Center_Y + screen.getY()-4, 8, 8,2);
        g.drawText(String(i), ZirkOSC_Center_X + screen.getX()+6, ZirkOSC_Center_Y + screen.getY()-2, 10, 10, Justification::centred, false);
    
    }
   // screen = domeToScreen(mSourcePoint);
    //g.setColour(Colours::blue);
    //g.drawEllipse(ZirkOSC_Center_X + screen.getX()-4, ZirkOSC_Center_Y + screen.getY()-4, 8, 8,2);
}

void ZirkOscjuceAudioProcessorEditor::paintWallCircle (Graphics& g){
    g.setColour(Colours::white);
    g.fillEllipse(10.0f, 30.0f, ZirkOSC_DomeRadius * 2, ZirkOSC_DomeRadius * 2);
    g.setColour(Colours::black);
    g.drawEllipse(10.0f, 30.0f, ZirkOSC_DomeRadius * 2, ZirkOSC_DomeRadius * 2, 1.0f);
}

void ZirkOscjuceAudioProcessorEditor::paintCenterDot (Graphics& g){
    g.setColour(Colours::red);
    g.fillEllipse(ZirkOSC_Center_X - 3.0f, ZirkOSC_Center_Y - 3.0f, 6.0f,6.0f );
}

void ZirkOscjuceAudioProcessorEditor::paintAzimuthLine (Graphics& g){
    g.setColour(Colours::red);
    float HRAzim = (float) azimuthSlider.getValue();
    float HRElev  = (float) elevationSlider.getValue();
    Point <float> screen = domeToScreen(Point<float>(HRAzim,HRElev));
    g.drawLine(ZirkOSC_Center_X, ZirkOSC_Center_Y, ZirkOSC_Center_X + screen.getX(), ZirkOSC_Center_Y + screen.getY() );
}

void ZirkOscjuceAudioProcessorEditor::paintZenithCircle (Graphics& g){
    Point <float> screen = domeToScreen(Point<float>((float)azimuthSlider.getValue(),(float)elevationSlider.getValue()));
    float raduisZenith = sqrtf(screen.getX()*screen.getX() + screen.getY()*screen.getY());
    g.drawEllipse(ZirkOSC_Center_X-raduisZenith, ZirkOSC_Center_Y-raduisZenith, raduisZenith*2, raduisZenith*2, 1.0);
}

void ZirkOscjuceAudioProcessorEditor::paintCrosshairs (Graphics& g){
    g.setColour(Colours::grey);
    float radianAngle=0.0f;
    float fraction = 0.9f;
    Point<float> axis = Point<float>();
    for (int i= 0; i<ZirkOSC_NumMarks; i++) {
        radianAngle = degreeToRadian(ZirkOSC_MarksAngles[i]);
        axis = {cosf(radianAngle), sinf(radianAngle)};
        g.drawLine(ZirkOSC_Center_X+(ZirkOSC_DomeRadius*fraction)*axis.getX(), ZirkOSC_Center_Y+(ZirkOSC_DomeRadius*fraction)*axis.getY(),ZirkOSC_Center_X+(ZirkOSC_DomeRadius)*axis.getX(), ZirkOSC_Center_Y+(ZirkOSC_DomeRadius)*axis.getY(),1.0f);
    }
    
}

void ZirkOscjuceAudioProcessorEditor::paintCoordLabels (Graphics& g){
    g.setColour(Colours::black);
    g.drawLine(ZirkOSC_Center_X - ZirkOSC_DomeRadius, ZirkOSC_Center_Y, ZirkOSC_Center_X + ZirkOSC_DomeRadius, ZirkOSC_Center_Y ,0.5f);
     g.drawLine(ZirkOSC_Center_X , ZirkOSC_Center_Y - ZirkOSC_DomeRadius, ZirkOSC_Center_X , ZirkOSC_Center_Y + ZirkOSC_DomeRadius,0.5f);

}


/*Conversion function*/

Point <float> ZirkOscjuceAudioProcessorEditor::domeToScreen (Point <float> p){
    float x,y;
    x = -ZirkOSC_DomeRadius * sinf(degreeToRadian(p.getX())) * cosf(degreeToRadian(p.getY()));
    y = -ZirkOSC_DomeRadius * cosf(degreeToRadian(p.getX())) * cosf(degreeToRadian(p.getY()));
    return Point <float> (x, y);
}


Point <float> ZirkOscjuceAudioProcessorEditor::screenToDome (Point <float>){
    return Point <float> (0.0, 0.0);
}

inline float ZirkOscjuceAudioProcessorEditor::degreeToRadian (float degree){
    return ((degree/360.0f)*2*3.1415);
}

inline float ZirkOscjuceAudioProcessorEditor::radianToDegree(float radian){
    return (radian/(2*3.1415)*360.0f);
}

void ZirkOscjuceAudioProcessorEditor::timerCallback(){
    
    ZirkOscjuceAudioProcessor* ourProcessor = getProcessor();
    int selectedSource = ourProcessor->selectedSource;
    
    gainSlider.setValue (ourProcessor->tabSource[selectedSource].getGain(), dontSendNotification);
    float HRValue = PercentToHR(ourProcessor->tabSource[selectedSource].getAzimuth(), ZirkOSC_Azim_Min, ZirkOSC_Azim_Max);
    azimuthSlider.setValue(HRValue,dontSendNotification);
    
    HRValue = PercentToHR(ourProcessor->tabSource[selectedSource].getElevation(), ZirkOSC_Elev_Min, ZirkOSC_Elev_Max);
    elevationSlider.setValue(HRValue,dontSendNotification);
    
    HRValue = PercentToHR(ourProcessor->tabSource[selectedSource].getAzimuth_span(), ZirkOSC_AzimSpan_Min, ZirkOSC_AzimSpan_Max);
    azimuthSpanSlider.setValue(HRValue,dontSendNotification);
    
    HRValue = PercentToHR(ourProcessor->tabSource[selectedSource].getElevation_span(), ZirkOSC_ElevSpan_Min, ZirkOSC_ElevSpan_Max);
    elevationSpanSlider.setValue(HRValue,dontSendNotification);
    //mSourcePoint.setX(ourProcessor->currentSource.getAzimuth());
    //mSourcePoint.setY(ourProcessor->currentSource.getElevation());
    
    /*AudioPlayHead::CurrentPositionInfo newPos (ourProcessor->lastPosInfo);
    if (lastDisplayedPosition == newPos){
        repaint();
        lastDisplayedPosition= newPos;
    }*/
    repaint(); //not good
}

void ZirkOscjuceAudioProcessorEditor::buttonClicked (Button* button)
{

    //if (button==button1){
      //  label->setText("Youps",false);
 
//    }
}


float PercentToHR(float percent, float min, float max){
    return percent*(max-min)+min;
}

float HRToPercent(float HRValue, float min, float max){
    return (HRValue-min)/(max-min);
}

void ZirkOscjuceAudioProcessorEditor::sliderValueChanged (Slider* slider)
{
    ZirkOscjuceAudioProcessor* ourProcessor = getProcessor();
    float percentValue=0;
    if (slider == &gainSlider) {
        ourProcessor->beginParameterChangeGesture(ZirkOscjuceAudioProcessor::ZirkOSC_Gain_Param);
        ourProcessor->setParameterNotifyingHost (ZirkOscjuceAudioProcessor::ZirkOSC_Gain_Param,
                                                   (float) gainSlider.getValue());
        ourProcessor->endParameterChangeGesture(ZirkOscjuceAudioProcessor::ZirkOSC_Gain_Param);
    }
    else if (slider == &azimuthSlider) {
        percentValue = HRToPercent((float) azimuthSlider.getValue(), ZirkOSC_Azim_Min, ZirkOSC_Azim_Max);
        ourProcessor->beginParameterChangeGesture(ZirkOscjuceAudioProcessor::ZirkOSC_Azim_Param);
        ourProcessor->setParameterNotifyingHost (ZirkOscjuceAudioProcessor::ZirkOSC_Azim_Param,
                                                   percentValue);
        mSourcePoint.setX(azimuthSlider.getValue());
        ourProcessor->endParameterChangeGesture(ZirkOscjuceAudioProcessor::ZirkOSC_Azim_Param);
    }
    else if (slider == &elevationSlider) {
        percentValue = HRToPercent((float) elevationSlider.getValue(), ZirkOSC_Elev_Min, ZirkOSC_Elev_Max);
        ourProcessor->beginParameterChangeGesture(ZirkOscjuceAudioProcessor::ZirkOSC_Elev_Param);
        ourProcessor->setParameterNotifyingHost (ZirkOscjuceAudioProcessor::ZirkOSC_Elev_Param,
                                                   percentValue);
        mSourcePoint.setY(elevationSlider.getValue());
        ourProcessor->endParameterChangeGesture(ZirkOscjuceAudioProcessor::ZirkOSC_Elev_Param);
    }else if (slider == &elevationSpanSlider) {
        percentValue = HRToPercent((float) elevationSpanSlider.getValue(), ZirkOSC_ElevSpan_Min, ZirkOSC_ElevSpan_Max);
        ourProcessor->beginParameterChangeGesture(ZirkOscjuceAudioProcessor::ZirkOSC_ElevSpan_Param);
        ourProcessor->setParameterNotifyingHost (ZirkOscjuceAudioProcessor::ZirkOSC_ElevSpan_Param,
                                                 percentValue);
        ourProcessor->endParameterChangeGesture(ZirkOscjuceAudioProcessor::ZirkOSC_ElevSpan_Param);
    }else if (slider == &azimuthSpanSlider) {
        percentValue = HRToPercent((float) azimuthSpanSlider.getValue(), ZirkOSC_AzimSpan_Min, ZirkOSC_AzimSpan_Max);
        ourProcessor->beginParameterChangeGesture(ZirkOscjuceAudioProcessor::ZirkOSC_AzimSpan_Param);
        ourProcessor->setParameterNotifyingHost (ZirkOscjuceAudioProcessor::ZirkOSC_AzimSpan_Param,
                                                 percentValue);
        
        ourProcessor->endParameterChangeGesture(ZirkOscjuceAudioProcessor::ZirkOSC_AzimSpan_Param);
    }else;
    repaint();
    
}


void ZirkOscjuceAudioProcessorEditor::mouseDown (const MouseEvent &event){
    int source=-1;
    
    if (event.x>10 && event.x <20+ZirkOSC_DomeRadius*2 && event.y>20 && event.y< 40+ZirkOSC_DomeRadius*2) {
        source=getSourceFromPosition(Point<float>(event.x-ZirkOSC_Center_X, event.y-ZirkOSC_Center_Y));
        
    }
    draggableSource = (source!=-1);
    if(draggableSource){
        getProcessor()->selectedSource = source;
        mSourcePoint.setX(getProcessor()->tabSource[source].getAzimuth());
        mSourcePoint.setY(getProcessor()->tabSource[source].getElevation());
        repaint();
    }
    
}

int ZirkOscjuceAudioProcessorEditor::getSourceFromPosition(Point<float> p ){
    for (int i=0; i<getProcessor()->nbrSources ; i++){
        if (getProcessor()->tabSource[i].contains(p)){
            return i;
        }
    }
    return -1;
}
void ZirkOscjuceAudioProcessorEditor::mouseDrag (const MouseEvent &event){
    if(draggableSource){
        ZirkOscjuceAudioProcessor* ourProcessor = getProcessor();
        int selectedSource = ourProcessor->selectedSource;
        Point<float> pointRelativeCenter = Point<float>(event.x-ZirkOSC_Center_X, event.y-ZirkOSC_Center_Y);
    
        ourProcessor->tabSource[selectedSource].setPositionXY(pointRelativeCenter);
        float HRAzimuth = PercentToHR(ourProcessor->tabSource[selectedSource].getAzimuth(), ZirkOSC_Azim_Min, ZirkOSC_Azim_Max);
        mSourcePoint.setX(HRAzimuth);
        
        ourProcessor->beginParameterChangeGesture(ZirkOscjuceAudioProcessor::ZirkOSC_Azim_Param);
        ourProcessor->setParameterNotifyingHost (ZirkOscjuceAudioProcessor::ZirkOSC_Azim_Param,
                                                 ourProcessor->tabSource[selectedSource].getAzimuth());
        ourProcessor->endParameterChangeGesture(ZirkOscjuceAudioProcessor::ZirkOSC_Azim_Param);
        
        
        float HRElevation = PercentToHR(ourProcessor->tabSource[selectedSource].getElevation(), ZirkOSC_Elev_Min, ZirkOSC_Elev_Min);
        mSourcePoint.setY(HRElevation);
        
        ourProcessor->beginParameterChangeGesture(ZirkOscjuceAudioProcessor::ZirkOSC_Elev_Param);
        ourProcessor->setParameterNotifyingHost (ZirkOscjuceAudioProcessor::ZirkOSC_Elev_Param,
                                                 ourProcessor->tabSource[selectedSource].getElevation());
        ourProcessor->endParameterChangeGesture(ZirkOscjuceAudioProcessor::ZirkOSC_Elev_Param);
        
        ourProcessor->sendOSCValues();
        repaint();
    }
}
void ZirkOscjuceAudioProcessorEditor::mouseUp (const MouseEvent &event){
    
}