/*
 ==============================================================================

 This file was auto-generated by the Introjucer!

 It contains the basic startup code for a Juce application.

 ==============================================================================
 */

#ifndef __PLUGINEDITOR_H_4624BC76__
#define __PLUGINEDITOR_H_4624BC76__

#include "../JuceLibraryCode/JuceHeader.h"
#include "PluginProcessor.h"

//==============================================================================
/**
 */
class ZirkOscjuceAudioProcessorEditor  : public AudioProcessorEditor,
public ButtonListener,
public SliderListener,
public Timer,
public MouseListener,
public TextEditorListener,
public ComboBoxListener

{
public:
    //! Constructor
    ZirkOscjuceAudioProcessorEditor (ZirkOscjuceAudioProcessor* ownerFilter);
    //! Destructor
    ~ZirkOscjuceAudioProcessorEditor();

    //! This is just a standard Juce paint method...
    void paint (Graphics& g);
    
        //! when you want to refresh the TextEditors.
    void refreshGui();
    //! Enum of the movement contrains
    enum ConstrainType
    {
        Independant = 1,    /*!< Independant mode */
        FixedRadius = 2,    /*!< All sources' radius are fixed */
        FixedAngles = 3,    /*!< Angle between sources are fixed */
        FullyFixed  = 4,    /*!< FixedRadius and fixedAngles */
        DeltaLocked = 5,    /*!< Delta lock mode */
        Circular    = 6     /*!< Circular */
    };
    
    //! Move the sources circular with a radius fixed
    void moveCircularWithFixedRadius (Point<float>);
    //! Move sources with a delta x and delta y (delta lock)
    void moveSourcesWithDelta(Point<float>);
    //! Move sources with a delta x and delta y (delta lock)
    void movePointsDeltaLock(Point <float> );
    //! Move sources around the center
    void moveCircular(Point<float> );
    //! Move sources with fixed angle between each source
    void moveFixedAngles(Point<float>);
    //! Move sources with fixed angles and fixed radius
    void moveFullyFixed(Point<float>);
    //! Setter FixedAngle
    void setFixedAngle(bool fixedAngle);
    //! Getter FixedAngle
    bool isFixedAngle();

private:
    
    //! Called when a comboBox's value has changed
    void comboBoxChanged (ComboBox* comboBoxThatHasChanged);
    //! Called when a button is clicked
    void buttonClicked (Button* button);
    //! Called when a mouse is clicked
    void mouseDown (const MouseEvent &event);
    //! Called when there is a draggin event
 	void mouseDrag (const MouseEvent &event);
    //! Called when the mouse is up
 	void mouseUp (const MouseEvent &event);
    //! Called when a value of a slider has changed
    void sliderValueChanged (Slider* slider);
    //! Called every laps of time
    void timerCallback();
    //! Called when "enter" is pressed on a TextEditor
    void textEditorReturnKeyPressed (TextEditor &editor);
    //! Called when a TextEditor loses focus
    void textEditorFocusLost (TextEditor &editor);

    
    bool mFixedAngle=false;
    AudioPlayHead::CurrentPositionInfo lastDisplayedPosition;
    int getSourceFromPosition(Point<float> p );
    Point <float> mSourcePoint;




    ToggleButton linkSpanButton;
    Slider gainSlider;
    Slider azimuthSlider;
    Slider azimuthSpanSlider;
    Slider elevationSlider;
    Slider elevationSpanSlider;

    Label azimuthSpanLabel;
    Label elevationSpanLabel;
    Label azimuthLabel;
    Label gainLabel;
    Label elevationLabel;
    Label OSCPortLabel;
    Label OSCPortOutgoingIPadLabel;
    Label OSCPortIncomingIPadLabel;
    Label NbrSourceLabel;
    Label channelNumberLabel;
    Label OSCAdressIPadTextLabel;

    TextEditor OSCPortTextEditor;
    TextEditor NbrSourceTextEditor;
    TextEditor channelNumberTextEditor;
    TextEditor OSCPortOutgoingIPadTextEditor;
    TextEditor OSCAdressIPadTextEditor;
    TextEditor OSCPortIncomingIPadTextEditor;

    ComboBox mouvementConstrain;

    bool draggableSource;
    bool linkSpan = false;

    ZirkOscjuceAudioProcessor* getProcessor() const
    {
        return static_cast <ZirkOscjuceAudioProcessor*> (getAudioProcessor());
    }


    void orderSourcesByAngle(int begin, SoundSource tab [] );
    /*Painting functions*/

    void paintSpanArc (Graphics& g);
    void paintSourcePoint (Graphics& g);
    void paintWallCircle (Graphics& g);
    void paintCenterDot (Graphics& g);
    void paintAzimuthLine (Graphics& g);
    void paintZenithCircle (Graphics& g);
    void paintCrosshairs (Graphics& g);
    void paintCoordLabels (Graphics& g);

    /*Conversion functions*/

    Point <float> domeToScreen (Point <float>);
    Point <float> screenToDome (Point <float>);

    inline float degreeToRadian (float);
    inline float radianToDegree (float);


    int * getOrderSources(int, SoundSource[]);


};

float PercentToHR(float , float , float );
float HRToPercent(float , float , float );

#endif  // __PLUGINEDITOR_H_4624BC76__
